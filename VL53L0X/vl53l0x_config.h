 
#ifndef _VL53L0X_CONFIG_H
#define _VL53L0X_CONFIG_H


#ifdef __cplusplus
extern "C"
{
#endif

#include "main.h"

//---------------------------------------------------------------------------------------------------
// расспиновка модуля:
// VIN - питание модуля через стабилизатор напряжения (3-5 Вольт) Сам модуль работает максимум 2.8 Вольт
// 2V8 - питание модуля напрямую миную стабилизатор (2.8 Вольт), также при питании через VIN с данного пина можно снимать напряжение 2.8 Вольт до 150 мА
// GND - земля
// GPIO/GPIO1 - Выход прерывания. Открытый сток. Если используется, его следует тянуть вверх с 47 кОм резистор, в противном случае оставить неподключенным. 
//							Прерывание срабатывает при ниском уровне, Окуратно с этим портом он подтянут к 2.8 Вольтам если случайно туда дадим больше то модуль згорит.
// XSHUT/SHDN/GPIO0/CE - По умолчанию при включении включен чип (СЕ). Его следует тянуть высоко с помощью Резистор 47 кОм. Для отключения модуля тянем его к земле.
//							на модуле подтянут к питанию 2.8 Вольт через диод ( поетому когда на ножке будет +3.3 Вольта диод не пропустит )
// SCL - i2c
// SDA - i2c

// в CubeMX включаем два дополнительных пина:
// ( один прерывание называем GPIO1 подтяжку не делаем срабатывает на спадающий фронт )
// второй пин на выход обычный им будет ребутить датчик называем его XSHUT и ставим по умолчанию высокий уровень
// когда на пине XSHUT уровень низкий устройство отключено


// характеристики:
// чип: VL53L0X
// длина волны излучателя: 940 нм
// рабочее напряжение: 3...5 В
// интерфейс: I2C (программируемый адрес)
// рабочая дальность: до 2 м


// функции для работы с датчиков находятся в файле "vl53l0x_api_strings.h

// подключение библиотеки:
// кидаем папку в корень проекта
// подключаем пути в проекте:
//		..\VL53L0X\Inc
//		..\VL53L0X\Src
//		..\VL53L0X
// далее создаем папку в дереве проекта и туда подключаем все файлы

// >>>>> в режиме прерывания значения более точные и стабильные <<<<<

//---------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------
// оригинальный адресс датчика на шине I2C
#define VL53L0X_SLAVE_ADDRESS 											(0x29<<1)

// укажите функцию задержки ( для HAL или RTOS ) 
// HAL_Delay(ms) или os_delay(ms) или другую
#define DELAY_FUNC(ms)															HAL_Delay(ms)

//---------------------------------------------------------------------------------------------------





#ifdef __cplusplus
}
#endif

#endif
